- warn: { name: Use DerivingStrategies }
- warn: { name: Redundant infix bracket due to operator fixities }

- group:
    name: lamdu-style
    enabled: true
    imports:
    - package base
    - package lens
    rules:
    - hint: {lhs: mapM, rhs: traverse}
    - hint: {lhs: mapM_, rhs: traverse_}
    - hint: {lhs: a `mappend` b, rhs: a <> b}
    - hint: {lhs: mappend a b, rhs: a <> b}
    - hint: {lhs: Control.Lens.filtered (Control.Lens.has a), rhs: filteredBy a}
    - hint: {lhs: \x -> a $ b x, rhs: a . b}
    - ignore: {name: Use tuple-section}
    - hint: {lhs: "case a of {Nothing -> mempty; Just b -> c}", rhs: foldMap (\b -> c) a }
    - hint: {lhs: "Data.Set.member a", rhs: "(^. Control.Lens.contains a)"}
    - hint: {lhs: "zipWith a [0..]", rhs: "Control.Lens.imap a"}
    - hint: {lhs: "zipWith a [0::Int ..]", rhs: "Control.Lens.imap a"}
    - hint: {lhs: "map (uncurry a) (Data.Map.toList b)", rhs: "Control.Lens.imap a b ^.. Control.Lens.folded"}
    - hint: {lhs: "mempty & (Control.Lens.at a ?~ b)", rhs: "a Control.Lens.Extended.~~> b"}
    - warn: {lhs: "do { a <- b; pure c }", rhs: b <&> \a -> c}
    - warn: {lhs: "do { a <- b; c & pure }", rhs: b <&> \a -> c}
    - warn: {lhs: "[a] & sequenceA", rhs: "a <&> pure"}
    - warn: {lhs: "lift a >>= lift . b", rhs: "a >>= b & lift"}
    - warn: {lhs: "pure a <&> b", rhs: "pure (b a)"}
    - warn: {lhs: "a & lift <&> b >>= lift . c", rhs: "a <&> b >>= c & lift"}
    - warn: {lhs: "either (Left . a) (Right . b)", rhs: "bimap a b"}

- group:
    name: generalise-for-conciseness
    enabled: true

- group:
    name: future
    enabled: true

- group:
    name: monomorphic
    enabled: true

- group:
    name: use-lens
    enabled: true
    rules:
    - warn: {lhs: "head (a ++ [b])", rhs: "fromMaybe b (a ^? traverse)"}
    - warn: {lhs: "head (a <> [b])", rhs: "fromMaybe b (a ^? traverse)"}
    - warn: {lhs: "mconcat [a | x <- take 1 b]", rhs: "foldMap (\\x -> a) (b ^? traverse)"}

# extend existing group
- group:
    name: lens
    rules:
    - warn: {lhs: "a <&> (<&> b)", rhs: "a <&> Lens.mapped %~ b"}
    - warn: {lhs: "a ^? b <&> (^. c)", rhs: "a ^? (b . c)"}
    - warn: {lhs: "Control.Lens.at a . Control.Lens._Just", rhs: "Control.Lens.ix a"}
    - warn: {lhs: "a & (b .~ (a ^. b))", rhs: "a"}
    - warn: {lhs: "(a ^. b) & (c .~ (a ^. (b . c)))", rhs: "a ^. b"}
    - warn: {lhs: "a ^.. (b . Control.Lens.withIndex)", rhs: "a ^@.. b"}
    - error: {lhs: "(^. Control.Lens.folded) . fmap a", rhs: "foldMap a"}
    - error: {lhs: "(a <&> b) ^. Control.Lens.folded", rhs: "foldMap b a"}
    - error: {lhs: "a ^. b & Control.Lens.has c", rhs: "Control.Lens.has (b . c) a"}
    - error: {lhs: "Control.Lens.has (Control.Lens.at a)", rhs: "True"}
    - error: {lhs: "Control.Lens.has (a . Control.Lens.at b)", rhs: "Control.Lens.has a"}
    - error: {lhs: "Control.Lens.nullOf (Control.Lens.at a)", rhs: "False"}
    - error: {lhs: "Control.Lens.nullOf (a . Control.Lens.at b)", rhs: "Control.Lens.nullOf a"}
